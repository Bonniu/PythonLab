Zadanie polega na zaimplementowaniu symulacji, w której wilk łapie owce.

Symulacja obejmuje dwa rodzaje zwierząt: pojedynczego wilka oraz pewną grupę owiec.
Zwierzęta te poruszają się po nieskończonej łące, na której nie występują żadne przeszkody terenowe:
wilk goni owce, próbując je złapać, a następnie pożreć, z kolei owce próbują (dość nieporadnie) uciekać przed wilkiem.
Wobec powyższych założeń łąka reprezentowana jest jako nieograniczona przestrzeń dwuwymiarowa o środku położonym w punkcie (0,0; 0,0),
a zatem za pomocą kartezjańskiego układu współrzędnych, natomiast pozycję każdego zwierzęcia na łące określa para liczb zmiennoprzecinkowych
(współrzędne mogą być zarówno dodatnie, jak i ujemne).

Na początku symulacji następuje określenie pozycji początkowych wszystkich zwierząt.
Pozycja początkowa każdej owcy ustalana jest w sposób losowy, gdzie każda współrzędna losowana
jest z zakresu [-init_pos_limit, init_pos_limit], natomiast pozycja początkowa wilka jest to środek łąki, czyli punkt (0,0; 0,0).

Przebieg symulacji ma charakter turowy.
Podczas każdej tury najpierw po kolei wykonują ruchy wszystkie żyjące owce, a dopiero na końcu wykonywany jest ruch przez wilka.
Na początku swojego ruchu owca wybiera losowo jeden z czterech kierunków: północ (góra), południe (dół), wschód (prawo), zachód (lewo),
 a następnie porusza się w wylosowanym kierunku o odcinek o długości sheep_move_dist. Z kolei wilk w ramach swojego ruchu najpierw określa,
 która owca znajduje się najbliżej niego, po czym sprawdza, czy nie znalazła się czasem w zasięgu jego ataku,
 czyli w odległości mniejszej niż wolf_move_dist: jeśli tak - to ją pożera, co oznacza, że owca znika,
 natomiast jeśli nie - to rusza za nią w pogoń, poruszając się w jej kierunku o odcinek o długości wolf_move_dist
 (jeżeli w tej samej najbliższej odległości znajdzie się więcej niż jedna owca, podejmowane czynności dotyczą tylko pierwszej z nich).
 Symulacja kończy się albo kiedy wszystkie owce zostaną pożarte, albo kiedy minie z góry określona liczba tur.

############### Wymagania na ocenę dostateczną

Zaimplementować symulację zgodnie z powyższym opisem, przyjmując następujące wartości:

liczba tur: 50;
liczba owiec: 15;
init_pos_limit: 10.0;
sheep_move_dist: 0.5;
wolf_move_dist: 1.0.

W celu generowania liczb losowych skorzystać z pakietu random z biblioteki standardowej.
W przypadku konieczności wykonywania bardziej zaawansowanych obliczeń matematycznych skorzystać z pakietu math z biblioteki standardowej.
Zaimplementować wyświetlanie podstawowych informacji o stanie symulacji na zakończenie każdej tury. Informacje te mają obejmować:
numer tury;
pozycję wilka;
liczbę żywych owiec;
jeżeli któraś z owiec została pożarta - informację o tym fakcie wraz z określeniem, która to była owca (jej numer porządkowy).

Wyświetlenie powyższych informacji nie powinno zatrzymywać dalszego przebiegu symulacji - żadna interakcja z użytkownikiem nie jest tu zakładana.
Korzystając z pakietu json z biblioteki standardowej, zaimplementować zapisywanie pozycji każdego zwierzęcia podczas każdej tury do pliku pos.json.
Zawartość pliku ma stanowić lista, której elementami będą słowniki, gdzie każdy słownik odpowiadać będzie pojedynczej turze symulacji i zawierać będzie następujące elementy:
'round_no' - numer tury (liczba całkowita);
'wolf_pos' - pozycja wilka (para liczb zmiennoprzecinkowych);
'sheep_pos' - pozycje wszystkich owiec (lista zawierająca pary liczb zmiennoprzecinkowych w przypadku żywych owiec albo wartość None w przypadku owiec, które zostały pożarte).
Jeśli plik pos.json już istnieje, powinien zostać nadpisany.
Korzystając z pakietu csv z biblioteki standardowej, zaimplementować zapisywanie liczby żywych owiec podczas każdej tury do pliku alive.csv.
Plik ten ma się składać z dwóch kolumn przechowujących następujące wartości:
numer tury (liczba całkowita);
liczba żywych owiec (liczba całkowita).
Każdej turze ma w tym pliku odpowiadać jeden wiersz (rekord). Jeśli plik alive.csv już istnieje, powinien zostać nadpisany.